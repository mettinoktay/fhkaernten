-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\eduyilmet001\Desktop\simulink_vhdlcoder\CLKDIV_LED_basic\ledcntrl.vhd
-- Created: 2023-10-05 12:09:47
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ledcntrl
-- Source Path: CLKDIV_LED_basic/ledcntrl
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ledcntrl IS
  PORT( CLK100MHZ                         :   IN    std_logic;
        RESETN                            :   IN    std_logic;
        SW0                               :   IN    std_logic;
        Trigger                           :   IN    std_logic;
        LED0                              :   OUT   std_logic
        );
END ledcntrl;


ARCHITECTURE rtl OF ledcntrl IS

  -- Signals
  SIGNAL Trigger_delay_ctrl_const_out     : std_logic;
  SIGNAL Trigger_delay_ctrl_delay_out     : std_logic;
  SIGNAL Trigger_delay_Initial_Val_out    : std_logic;
  SIGNAL Trigger_delay_out                : std_logic;
  SIGNAL Trigger_delayed                  : std_logic;
  SIGNAL Trigger_delayed_inverted         : std_logic;
  SIGNAL Trigger_emulated                 : std_logic;
  SIGNAL Constant3_out1                   : std_logic;
  SIGNAL Add_out1                         : std_logic;  -- ufix1
  SIGNAL Unit_Delay_out1                  : std_logic;  -- ufix1
  SIGNAL Extract_Bits_out1                : std_logic;  -- ufix1
  SIGNAL Cast_To_Boolean_out1             : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL Logical_Operator_out1_last_value : std_logic;

BEGIN
  -- MSB extracted (1 bit counter) (6Hz CLK is divied by 2)
  -- With each CLK cycle (6Hz CLK), '1' is added to the output
  -- The CLK that is used for the whole subsystem (externaly connected 6Hz)
  -- Type cast to boolean
  -- If SW0='0' then the LED0 is OFF

  Trigger_delay_ctrl_const_out <= '1';

  Trigger_delay_ctrl_delay_process : PROCESS (CLK100MHZ, RESETN)
  BEGIN
    IF RESETN = '0' THEN
      Trigger_delay_ctrl_delay_out <= '0';
    ELSIF CLK100MHZ'EVENT AND CLK100MHZ = '1' THEN
      Trigger_delay_ctrl_delay_out <= Trigger_delay_ctrl_const_out;
    END IF;
  END PROCESS Trigger_delay_ctrl_delay_process;


  Trigger_delay_Initial_Val_out <= '1';

  Trigger_delay_process : PROCESS (CLK100MHZ, RESETN)
  BEGIN
    IF RESETN = '0' THEN
      Trigger_delay_out <= '0';
    ELSIF CLK100MHZ'EVENT AND CLK100MHZ = '1' THEN
      Trigger_delay_out <= Trigger;
    END IF;
  END PROCESS Trigger_delay_process;


  
  Trigger_delayed <= Trigger_delay_Initial_Val_out WHEN Trigger_delay_ctrl_delay_out = '0' ELSE
      Trigger_delay_out;

  Trigger_delayed_inverted <=  NOT Trigger_delayed;

  Trigger_emulated <= Trigger_delayed_inverted AND Trigger;

  Constant3_out1 <= '1';

  Unit_Delay_process : PROCESS (CLK100MHZ, RESETN)
  BEGIN
    IF RESETN = '0' THEN
      Unit_Delay_out1 <= '0';
    ELSIF CLK100MHZ'EVENT AND CLK100MHZ = '1' THEN
      IF Trigger_emulated = '1' THEN
        Unit_Delay_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Add_out1 <= Constant3_out1 XOR Unit_Delay_out1;

  Extract_Bits_out1 <= Add_out1;

  
  Cast_To_Boolean_out1 <= '1' WHEN Extract_Bits_out1 /= '0' ELSE
      '0';

  Logical_Operator_out1 <= Cast_To_Boolean_out1 AND SW0;

  out0_bypass_process : PROCESS (CLK100MHZ, RESETN)
  BEGIN
    IF RESETN = '0' THEN
      Logical_Operator_out1_last_value <= '0';
    ELSIF CLK100MHZ'EVENT AND CLK100MHZ = '1' THEN
      Logical_Operator_out1_last_value <= Logical_Operator_out1_1;
    END IF;
  END PROCESS out0_bypass_process;


  
  Logical_Operator_out1_1 <= Logical_Operator_out1_last_value WHEN Trigger_emulated = '0' ELSE
      Logical_Operator_out1;

  LED0 <= Logical_Operator_out1_1;

END rtl;

