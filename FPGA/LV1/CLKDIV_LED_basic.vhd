-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\eduyilmet001\Desktop\simulink_vhdlcoder\CLKDIV_LED_basic\CLKDIV_LED_basic.vhd
-- Created: 2023-10-05 12:09:47
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CLKDIV_LED_basic
-- Source Path: CLKDIV_LED_basic
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CLKDIV_LED_basic IS
  PORT( CLK100MHZ                         :   IN    std_logic;
        RESETN                            :   IN    std_logic;
        SW                                :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        LED                               :   OUT   std_logic_vector(0 TO 15)  -- boolean [16]
        );
END CLKDIV_LED_basic;


ARCHITECTURE rtl OF CLKDIV_LED_basic IS

  -- Component Declarations
  COMPONENT clkdiv0_37hz
    PORT( CLK100MHZ                       :   IN    std_logic;
          RESETN                          :   IN    std_logic;
          CLK0_37HZ                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT clkdiv6hz
    PORT( CLK100MHZ                       :   IN    std_logic;
          RESETN                          :   IN    std_logic;
          CLK6HZ                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ledcntrl
    PORT( CLK100MHZ                       :   IN    std_logic;
          RESETN                          :   IN    std_logic;
          SW0                             :   IN    std_logic;
          Trigger                         :   IN    std_logic;
          LED0                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : clkdiv0_37hz
    USE ENTITY work.clkdiv0_37hz(rtl);

  FOR ALL : clkdiv6hz
    USE ENTITY work.clkdiv6hz(rtl);

  FOR ALL : ledcntrl
    USE ENTITY work.ledcntrl(rtl);

  -- Signals
  SIGNAL clkdiv0_37hz_out1                : std_logic;
  SIGNAL SW_unsigned                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay_out1                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Extract_Bits_out1                : std_logic;  -- ufix1
  SIGNAL SW0                              : std_logic;
  SIGNAL clkdiv6hz_out1                   : std_logic;
  SIGNAL ledcntrl_out1                    : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Mux1_out1                        : std_logic_vector(0 TO 15);  -- boolean [16]
  SIGNAL Mux_out1                         : std_logic_vector(0 TO 15);  -- boolean [16]
  SIGNAL Switch_out1                      : std_logic_vector(0 TO 15);  -- boolean [16]

BEGIN
  -- 16 bit SW input vector
  -- Synchronize SW input with 100MHz CLK
  -- LSB of input vector is selected
  -- Type cast to boolean
  -- 6Hz CLK generator
  -- Blinking LED generator
  -- LED are set to '0' (no light)
  -- 16 bit LED output vector
  -- Recombine single bit values to 16 bit LED output vector
  -- To Professor Riedl: 
  -- 
  -- t_delay = 2.68 sec -> 1/2.68 = 0.37 Hz
  -- N = log(100Mhz/0.37) / log(2) -> 28 bits
  -- 
  -- The adder therefore has to be 29 bits at least.
  -- Individual #6:
  -- 
  -- LED Layout:
  -- 
  -- 1010010100111010 - 01011010110001010
  -- 0.37Hz CLK generator

  u_clkdiv0_37hz : clkdiv0_37hz
    PORT MAP( CLK100MHZ => CLK100MHZ,
              RESETN => RESETN,
              CLK0_37HZ => clkdiv0_37hz_out1
              );

  u_clkdiv6hz : clkdiv6hz
    PORT MAP( CLK100MHZ => CLK100MHZ,
              RESETN => RESETN,
              CLK6HZ => clkdiv6hz_out1
              );

  u_ledcntrl : ledcntrl
    PORT MAP( CLK100MHZ => CLK100MHZ,
              RESETN => RESETN,
              SW0 => SW0,
              Trigger => clkdiv6hz_out1,
              LED0 => ledcntrl_out1
              );

  SW_unsigned <= unsigned(SW);

  Delay_process : PROCESS (CLK100MHZ, RESETN)
  BEGIN
    IF RESETN = '0' THEN
      Delay_out1 <= to_unsigned(16#0000#, 16);
    ELSIF CLK100MHZ'EVENT AND CLK100MHZ = '1' THEN
      Delay_out1 <= SW_unsigned;
    END IF;
  END PROCESS Delay_process;


  Extract_Bits_out1 <= Delay_out1(0);

  
  SW0 <= '1' WHEN Extract_Bits_out1 /= '0' ELSE
      '0';

  Constant_out1 <= '0';

  Mux1_out1(0) <= ledcntrl_out1;
  Mux1_out1(1) <= Constant_out1;
  Mux1_out1(2) <= ledcntrl_out1;
  Mux1_out1(3) <= Constant_out1;
  Mux1_out1(4) <= Constant_out1;
  Mux1_out1(5) <= Constant_out1;
  Mux1_out1(6) <= ledcntrl_out1;
  Mux1_out1(7) <= ledcntrl_out1;
  Mux1_out1(8) <= Constant_out1;
  Mux1_out1(9) <= ledcntrl_out1;
  Mux1_out1(10) <= Constant_out1;
  Mux1_out1(11) <= ledcntrl_out1;
  Mux1_out1(12) <= ledcntrl_out1;
  Mux1_out1(13) <= Constant_out1;
  Mux1_out1(14) <= ledcntrl_out1;
  Mux1_out1(15) <= Constant_out1;

  Mux_out1(0) <= Constant_out1;
  Mux_out1(1) <= ledcntrl_out1;
  Mux_out1(2) <= Constant_out1;
  Mux_out1(3) <= ledcntrl_out1;
  Mux_out1(4) <= ledcntrl_out1;
  Mux_out1(5) <= ledcntrl_out1;
  Mux_out1(6) <= Constant_out1;
  Mux_out1(7) <= Constant_out1;
  Mux_out1(8) <= ledcntrl_out1;
  Mux_out1(9) <= Constant_out1;
  Mux_out1(10) <= ledcntrl_out1;
  Mux_out1(11) <= Constant_out1;
  Mux_out1(12) <= Constant_out1;
  Mux_out1(13) <= ledcntrl_out1;
  Mux_out1(14) <= Constant_out1;
  Mux_out1(15) <= ledcntrl_out1;

  
  Switch_out1(0) <= Mux1_out1(0) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(0);
  
  Switch_out1(1) <= Mux1_out1(1) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(1);
  
  Switch_out1(2) <= Mux1_out1(2) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(2);
  
  Switch_out1(3) <= Mux1_out1(3) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(3);
  
  Switch_out1(4) <= Mux1_out1(4) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(4);
  
  Switch_out1(5) <= Mux1_out1(5) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(5);
  
  Switch_out1(6) <= Mux1_out1(6) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(6);
  
  Switch_out1(7) <= Mux1_out1(7) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(7);
  
  Switch_out1(8) <= Mux1_out1(8) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(8);
  
  Switch_out1(9) <= Mux1_out1(9) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(9);
  
  Switch_out1(10) <= Mux1_out1(10) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(10);
  
  Switch_out1(11) <= Mux1_out1(11) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(11);
  
  Switch_out1(12) <= Mux1_out1(12) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(12);
  
  Switch_out1(13) <= Mux1_out1(13) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(13);
  
  Switch_out1(14) <= Mux1_out1(14) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(14);
  
  Switch_out1(15) <= Mux1_out1(15) WHEN clkdiv0_37hz_out1 = '0' ELSE
      Mux_out1(15);

  LED <= Switch_out1;

END rtl;

